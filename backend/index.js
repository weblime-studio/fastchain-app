require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { Connection, Keypair, Transaction, SystemProgram, PublicKey } = require('@solana/web3.js');
const { getOrCreateAssociatedTokenAccount, createTransferInstruction, getMint, TOKEN_PROGRAM_ID } = require('@solana/spl-token');
const nacl = require('tweetnacl');

const app = express();
const port = 3001;

app.use(cors());
app.use(express.json());

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª—é—á–∞ payer
let secretKey;
try {
  if (!process.env.PRIVATE_KEY) {
    throw new Error('PRIVATE_KEY –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ —É .env');
  }
  secretKey = Uint8Array.from(JSON.parse(process.env.PRIVATE_KEY));
} catch (e) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π PRIVATE_KEY —É .env:', e.message);
  process.exit(1);
}
const payer = Keypair.fromSecretKey(secretKey);
console.log('Payer Public Key:', payer.publicKey.toBase58());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Helius
const connection = new Connection('https://mainnet.helius-rpc.com/?api-key=f6c43c4f-5764-4355-8cd2-30fed87b2519', 'confirmed');

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∏ —Ç–æ–∫–µ–Ω–∞
let MINT_ADDRESS;
try {
  MINT_ADDRESS = new PublicKey(process.env.TOKEN_MINT);
  console.log('Token Mint Address:', MINT_ADDRESS.toBase58());
} catch (e) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∞–¥—Ä–µ—Å–∞ TOKEN_MINT —É .env');
  process.exit(1);
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É payer
async function checkPayerBalance() {
  const balance = await connection.getBalance(payer.publicKey);
  console.log('üí∞ –ë–∞–ª–∞–Ω—Å Payer:', balance / 1e9, 'SOL');
  if (balance < 0.002 * 1e9) {
    console.warn('‚ö†Ô∏è –£–≤–∞–≥–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SOL –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É payer');
  }
}
checkPayerBalance();

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—É payer
function testPayerSignature() {
  try {
    const message = Buffer.from('test');
    const signature = nacl.sign.detached(message, payer.secretKey);
    console.log('–¢–µ—Å—Ç–æ–≤–∏–π –ø—ñ–¥–ø–∏—Å payer:', Buffer.from(signature).toString('hex'));
  } catch (e) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—ñ–¥–ø–∏—Å—É:', e);
  }
}
testPayerSignature();

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
app.post('/get-transaction', async (req, res) => {
  try {
    const buyerAddress = new PublicKey(req.body.buyer);
    console.log('Buyer Address:', buyerAddress.toBase58());

    const latestBlockhash = await connection.getLatestBlockhash();
    console.log('Latest Blockhash:', latestBlockhash.blockhash);

    const transaction = new Transaction();
    transaction.recentBlockhash = latestBlockhash.blockhash;
    transaction.feePayer = buyerAddress;
    
    
    const solAmount = parseFloat(req.body.solAmount || '0.001')

    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó SystemProgram.transfer
    const transferInstruction = SystemProgram.transfer({
      fromPubkey: payer.publicKey,
      toPubkey: buyerAddress,
      lamports: Math.floor(solAmount * 1e9) // 0.001 SOL
    });
    transaction.add(transferInstruction);

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–æ –ø—ñ–¥–ø–∏—Å—É
    console.log('Transaction before signing:', {
      recentBlockhash: transaction.recentBlockhash,
      feePayer: transaction.feePayer?.toBase58(),
      instructions: transaction.instructions.map(i => ({
        programId: i.programId.toBase58(),
        data: i.data.toString('hex'),
        keys: i.keys.map(k => k.pubkey.toBase58())
      }))
    });

    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—è–¥–∫—É –ø—ñ–¥–ø–∏—Å–∞–Ω—Ç—ñ–≤ (payer –ø–µ—Ä—à–∏–π, buyer –¥—Ä—É–≥–∏–π)
    transaction.setSigners(payer.publicKey, buyerAddress);

    // –ü—ñ–¥–ø–∏—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó payer
    transaction.partialSign(payer);

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å—ñ–≤
    console.log('Transaction signatures:', transaction.signatures.map(s => ({
      publicKey: s.publicKey.toBase58(),
      signature: s.signature ? s.signature.toString('hex') : 'null'
    })));

    // –°–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const serializedTransaction = transaction.serialize({
      requireAllSignatures: false,
      verifySignatures: false
    });

    console.log('Serialized transaction length:', serializedTransaction.length);

    res.send({
      transaction: Buffer.from(serializedTransaction).toString('base64'),
      recentBlockhash: latestBlockhash.blockhash
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:', error);
    res.status(500).send({ success: false, error: error.message });
  }
});

// –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω—ñ–≤
app.post('/send-tokens', async (req, res) => {
  try {
    const buyer = new PublicKey(req.body.buyer);
    console.log('Buyer Address:', buyer.toBase58());

    const payerBalance = await connection.getBalance(payer.publicKey);
    console.log('üí∞ Payer SOL balance:', payerBalance / 1e9, 'SOL');
    if (payerBalance < 0.002 * 1e9) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ SOL –Ω–∞ —Ä–∞—Ö—É–Ω–∫—É payer');
    }

    const tokenAmountRaw = parseFloat(req.body.tokenAmount || '1')
    const tokenAmount = Math.floor(tokenAmountRaw * 10 ** decimals)
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–∫–µ–Ω
    const mintInfo = await getMint(connection, MINT_ADDRESS);
    const decimals = mintInfo.decimals;
    console.log('üî¢ Token decimals:', decimals);

    // –°—É–º–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö (1 —Ç–æ–∫–µ–Ω)
    const tokenAmount = 1 * 10 ** decimals;

    // –ê–∫–∞—É–Ω—Ç –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    const senderTokenAccount = await getOrCreateAssociatedTokenAccount(
      connection,
      payer,
      MINT_ADDRESS,
      payer.publicKey
    );

    // –ê–∫–∞—É–Ω—Ç –æ–¥–µ—Ä–∂—É–≤–∞—á–∞
    const recipientTokenAccount = await getOrCreateAssociatedTokenAccount(
      connection,
      payer,
      MINT_ADDRESS,
      buyer
    );

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–µ—Ä–µ–∫–∞–∑—É —Ç–æ–∫–µ–Ω—ñ–≤
    const transferIx = createTransferInstruction(
      senderTokenAccount.address,
      recipientTokenAccount.address,
      payer.publicKey,
      tokenAmount,
      [],
      TOKEN_PROGRAM_ID
    );

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const transaction = new Transaction().add(transferIx);
    const latestBlockhash = await connection.getLatestBlockhash();
    transaction.recentBlockhash = latestBlockhash.blockhash;
    transaction.feePayer = payer.publicKey;

    // –ü—ñ–¥–ø–∏—Å —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
    const signature = await connection.sendTransaction(transaction, [payer], {
      skipPreflight: false,
      preflightCommitment: 'confirmed',
    });

    console.log('‚úÖ –¢–æ–∫–µ–Ω–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ. –ü—ñ–¥–ø–∏—Å:', signature);
    res.send({ success: true, signature });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–∞–∑—É —Ç–æ–∫–µ–Ω—ñ–≤:', error);
    res.status(500).send({ success: false, error: error.message });
  }
});

app.listen(port, () => {
  console.log(`‚úÖ –ë–µ–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:${port}`);
});
